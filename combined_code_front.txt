

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\all_to_one_txt.py
==================================================

import os
from pathlib import Path

def merge_code(source_dir: str, output_file: str, extensions: list = None):
    """
    Объединяет код из всех файлов в указанной директории
    :param source_dir: Путь к исходной папке
    :param output_file: Путь к выходному файлу
    :param extensions: Список разрешений файлов для включения (например ['.py', '.js'])
    """
    if extensions is None:
        extensions = ['.py', '.js', '.html', '.css', '.txt']
    
    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(source_dir):
            # Исключаем папку node_modules
            if 'node_modules' in dirs:
                dirs.remove('node_modules')
            
            for file in files:
                if any(file.endswith(ext) for ext in extensions):
                    file_path = Path(root) / file
                    try:
                        with open(file_path, 'r', encoding='utf-8') as infile:
                            content = infile.read()
                            outfile.write(f"\n\n{'='*50}\n")
                            outfile.write(f"FILE: {file_path}\n")
                            outfile.write(f"{'='*50}\n\n")
                            outfile.write(content)
                    except UnicodeDecodeError:
                        print(f"Skipping binary file: {file_path}")
                    except Exception as e:
                        print(f"Error processing {file_path}: {str(e)}")

if __name__ == "__main__":
    # Настройки
    SOURCE_DIR = r"C:\Users\TECH - 103\Documents\new_gradebook\frontend"
    OUTPUT_FILE = "combined_code_front.txt"
    INCLUDE_EXTENSIONS = ['.py', '.js', '.jsx', '.html', '.css']
    
    merge_code(SOURCE_DIR, OUTPUT_FILE, INCLUDE_EXTENSIONS)
    print(f"All code merged into {OUTPUT_FILE}")


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\main.py
==================================================

# backend/main.py
from fastapi import FastAPI
from core.db import engine, Base

# Импорт моделей для регистрации в metadata
from models import student, teacher, subject, teacher_subject, parent, grade, schedule, attendance, administrator  # noqa

# Импорт роутеров
from routers.student_router import router as student_router
from routers.teacher_router import router as teacher_router
from routers.subject_router import router as subject_router
from routers.teacher_subject_router import router as teacher_subject_router
from routers.parent_router import router as parent_router
from routers.grade_router import router as grade_router
from routers.schedule_router import router as schedule_router
from routers.attendance_router import router as attendance_router
from routers.administrator_router import router as administrator_router


from fastapi.middleware.cors import CORSMiddleware 


app = FastAPI(title="Gradebook API")

# Добавить CORS middleware перед регистрацией роутеров
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Разрешить фронтенд
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Регистрация роутеров
app.include_router(student_router)
app.include_router(teacher_router)
app.include_router(subject_router)
app.include_router(teacher_subject_router)
app.include_router(parent_router)
app.include_router(grade_router)
app.include_router(schedule_router)
app.include_router(attendance_router)
app.include_router(administrator_router)

# При необходимости создания таблиц без миграций
# Base.metadata.create_all(bind=engine)


# backend/alembic.ini
# ------
# [alembic]
# script_location = backend/alembic
# sqlalchemy.url = %(DATABASE_URL)s
#
# [loggers]
# keys = root,sqlalchemy,alembic
#
# [handlers]
# keys = console
#
# [formatters]
# keys = generic
#
# [logger_root]
# level = WARN
# handlers = console
#
# [logger_sqlalchemy]
# level = INFO
# handlers = console
# qualname = sqlalchemy.engine
#
# [logger_alembic]
# level = INFO
# handlers = console
# qualname = alembic
#
# [handler_console]
# class = StreamHandler
# args = (sys.stderr,)
# level = NOTSET
# formatter = generic
#
# [formatter_generic]
# format = %(levelname)-5.5s [%(name)s] %(message)s

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\alembic\env.py
==================================================

# backend/alembic/env.py
from logging.config import fileConfig
import asyncio
from sqlalchemy.ext.asyncio import async_engine_from_config
from sqlalchemy import engine_from_config, pool
from alembic import context
import os
import sys

# Добавляем путь к пакету backend
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.db import Base  # SQLAlchemy Base
# Импорт всех моделей для регистрации метаданных
from models import student, teacher, subject, teacher_subject, parent, grade, schedule, attendance, administrator  # noqa

from core.config import settings

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# ✅ Подставляем строку подключения к БД из settings
config.set_main_option('sqlalchemy.url', str(settings.DATABASE_URL))

target_metadata = Base.metadata


def run_migrations_offline():
    url = config.get_main_option('sqlalchemy.url')
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix='sqlalchemy.',
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata
        )
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\alembic\versions\4d4943f22dcf_initial_tables.py
==================================================

"""Initial tables

Revision ID: 4d4943f22dcf
Revises: 
Create Date: 2025-05-15 13:43:45.966816

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4d4943f22dcf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('administrators',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('login', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('rights', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('login')
    )
    op.create_index(op.f('ix_administrators_id'), 'administrators', ['id'], unique=False)
    op.create_table('parents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('messenger_id', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parents_id'), 'parents', ['id'], unique=False)
    op.create_table('subjects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_subjects_id'), 'subjects', ['id'], unique=False)
    op.create_table('teachers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teachers_id'), 'teachers', ['id'], unique=False)
    op.create_table('schedules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('class_name', sa.String(length=10), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_schedules_id'), 'schedules', ['id'], unique=False)
    op.create_table('students',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('class_name', sa.String(length=10), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('contact_info', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['parents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_students_id'), 'students', ['id'], unique=False)
    op.create_table('teacher_subjects',
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('teacher_id', 'subject_id')
    )
    op.create_table('attendance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('is_present', sa.Boolean(), nullable=False),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('student_id', 'date', name='uix_student_date')
    )
    op.create_index(op.f('ix_attendance_id'), 'attendance', ['id'], unique=False)
    op.create_table('grades',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_grades_id'), 'grades', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_grades_id'), table_name='grades')
    op.drop_table('grades')
    op.drop_index(op.f('ix_attendance_id'), table_name='attendance')
    op.drop_table('attendance')
    op.drop_table('teacher_subjects')
    op.drop_index(op.f('ix_students_id'), table_name='students')
    op.drop_table('students')
    op.drop_index(op.f('ix_schedules_id'), table_name='schedules')
    op.drop_table('schedules')
    op.drop_index(op.f('ix_teachers_id'), table_name='teachers')
    op.drop_table('teachers')
    op.drop_index(op.f('ix_subjects_id'), table_name='subjects')
    op.drop_table('subjects')
    op.drop_index(op.f('ix_parents_id'), table_name='parents')
    op.drop_table('parents')
    op.drop_index(op.f('ix_administrators_id'), table_name='administrators')
    op.drop_table('administrators')
    # ### end Alembic commands ###


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\core\config.py
==================================================

# backend/core/config.py
from pydantic_settings import BaseSettings
from pydantic import PostgresDsn, Field          # остаётся как было


class Settings(BaseSettings):
    DB_HOST: str
    DB_PORT: str
    DB_NAME: str
    DB_USER: str
    DB_PASSWORD: str
    """
    Основные настройки приложения из переменных окружения
    """
    DATABASE_URL: PostgresDsn = Field(..., env='DATABASE_URL')
    SECRET_KEY: str = Field(..., env='SECRET_KEY')
    ALGORITHM: str = 'HS256'
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    class Config:
        # Файл с переменными окружения
        env_file = './.env'
        env_file_encoding = 'utf-8'


settings = Settings()

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\core\db.py
==================================================

# backend/core/db.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from core.config import settings


# Создаем движок SQLAlchemy
engine = create_engine(
    str(settings.DATABASE_URL),   # ✅ оборачиваем в str()
    echo=True,  # вывод SQL-запросов в логи, можно переключить на False
)

# Фабрика сессий, для зависимостей FastAPI
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# Базовый класс для всех моделей
Base = declarative_base()

# Dependency для получения сессии БД

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\core\__init__.py
==================================================



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\administrator.py
==================================================

# backend/models/administrator.py
from sqlalchemy import Column, Integer, String
from core.db import Base

class Administrator(Base):
    __tablename__ = 'administrators'

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    login = Column(String(50), unique=True, nullable=False)
    password_hash = Column(String(255), nullable=False)
    rights = Column(String(100), nullable=False)


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\attendance.py
==================================================

# backend/models/attendance.py
from sqlalchemy import Column, Integer, Date, Boolean, String, ForeignKey, UniqueConstraint
from sqlalchemy.orm import relationship
from core.db import Base

class Attendance(Base):
    __tablename__ = 'attendance'
    __table_args__ = (
        UniqueConstraint('student_id', 'date', name='uix_student_date'),
    )

    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, nullable=False)
    is_present = Column(Boolean, nullable=False)
    reason = Column(String(255), nullable=True)
    student_id = Column(Integer, ForeignKey('students.id'), nullable=False)

    student = relationship('Student', back_populates='attendance_records')

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\grade.py
==================================================

# backend/models/grade.py
from sqlalchemy import Column, Integer, Date, ForeignKey
from sqlalchemy.orm import relationship
from core.db import Base

class Grade(Base):
    __tablename__ = 'grades'

    id = Column(Integer, primary_key=True, index=True)
    value = Column(Integer, nullable=False)
    date = Column(Date, nullable=False)
    student_id = Column(Integer, ForeignKey('students.id'), nullable=False)
    teacher_id = Column(Integer, ForeignKey('teachers.id'), nullable=False)
    subject_id = Column(Integer, ForeignKey('subjects.id'), nullable=False)

    student = relationship('Student', back_populates='grades')
    teacher = relationship('Teacher', back_populates='grades')
    subject = relationship('Subject', back_populates='grades')

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\parent.py
==================================================

# backend/models/parent.py
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from core.db import Base

class Parent(Base):
    __tablename__ = 'parents'

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    phone = Column(String(20), nullable=False)
    messenger_id = Column(String(50), nullable=True)

    children = relationship('Student', back_populates='parent')


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\schedule.py
==================================================

# backend/models/schedule.py
from sqlalchemy import Column, Integer, Date, String, ForeignKey
from sqlalchemy.orm import relationship
from core.db import Base

class Schedule(Base):
    __tablename__ = 'schedules'

    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, nullable=False)
    class_name = Column(String(10), nullable=False)
    teacher_id = Column(Integer, ForeignKey('teachers.id'), nullable=False)
    subject_id = Column(Integer, ForeignKey('subjects.id'), nullable=False)

    teacher = relationship('Teacher', back_populates='schedules')
    subject = relationship('Subject', back_populates='schedules')

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\student.py
==================================================

# backend/models/student.py
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from core.db import Base

class Student(Base):
    __tablename__ = 'students'

    id = Column(Integer, primary_key=True, index=True)
    first_name = Column(String(50), nullable=False)
    last_name = Column(String(50), nullable=False)
    class_name = Column(String(10), nullable=False)
    parent_id = Column(Integer, ForeignKey('parents.id'), nullable=True)
    contact_info = Column(String(100), nullable=True)

    parent = relationship('Parent', back_populates='children')
    grades = relationship('Grade', back_populates='student')
    attendance_records = relationship('Attendance', back_populates='student')

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\subject.py
==================================================

# backend/models/subject.py
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from core.db import Base

class Subject(Base):
    __tablename__ = 'subjects'

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)

    teachers = relationship('TeacherSubject', back_populates='subject')
    grades = relationship('Grade', back_populates='subject')
    schedules = relationship('Schedule', back_populates='subject')

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\teacher.py
==================================================

# backend/models/teacher.py
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from core.db import Base

class Teacher(Base):
    __tablename__ = 'teachers'

    id = Column(Integer, primary_key=True, index=True)
    first_name = Column(String(50), nullable=False)
    last_name = Column(String(50), nullable=False)

    subjects = relationship('TeacherSubject', back_populates='teacher')
    grades = relationship('Grade', back_populates='teacher')
    schedules = relationship('Schedule', back_populates='teacher')


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\teacher_subject.py
==================================================

# backend/models/teacher_subject.py
from sqlalchemy import Column, Integer, ForeignKey
from sqlalchemy.orm import relationship
from core.db import Base

class TeacherSubject(Base):
    __tablename__ = 'teacher_subjects'
    teacher_id = Column(Integer, ForeignKey('teachers.id'), primary_key=True)
    subject_id = Column(Integer, ForeignKey('subjects.id'), primary_key=True)

    teacher = relationship('Teacher', back_populates='subjects')
    subject = relationship('Subject', back_populates='teachers')


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\models\__init__.py
==================================================



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\administrator_repository.py
==================================================

# backend/repositories/administrator_repository.py
from sqlalchemy.orm import Session
from models.administrator import Administrator
from schemas.administrator import AdministratorCreate

class AdministratorRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, admin_id: int) -> Administrator:
        return self.db.query(Administrator).filter(Administrator.id == admin_id).first()

    def get_by_login(self, login: str) -> Administrator:
        return self.db.query(Administrator).filter(Administrator.login == login).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Administrator).offset(skip).limit(limit).all()

    def create(self, admin: AdministratorCreate, password_hash: str) -> Administrator:
        db_admin = Administrator(
            name=admin.name,
            login=admin.login,
            rights=admin.rights,
            password_hash=password_hash
        )
        self.db.add(db_admin)
        self.db.commit()
        self.db.refresh(db_admin)
        return db_admin

    def update(self, admin_id: int, updates: dict) -> Administrator:
        db_admin = self.get(admin_id)
        for key, value in updates.items():
            setattr(db_admin, key, value)
        self.db.commit()
        self.db.refresh(db_admin)
        return db_admin

    def delete(self, admin_id: int) -> None:
        db_admin = self.get(admin_id)
        if db_admin:
            self.db.delete(db_admin)
            self.db.commit()

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\attendance_repository.py
==================================================

# backend/repositories/attendance_repository.py
from sqlalchemy.orm import Session
from models.attendance import Attendance
from schemas.attendance import AttendanceCreate

class AttendanceRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, attendance_id: int) -> Attendance:
        return self.db.query(Attendance).filter(Attendance.id == attendance_id).first()

    def get_by_student_date(self, student_id: int, date):
        return self.db.query(Attendance).filter(
            Attendance.student_id == student_id,
            Attendance.date == date
        ).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Attendance).offset(skip).limit(limit).all()

    def create(self, attendance: AttendanceCreate) -> Attendance:
        db_att = Attendance(**attendance.dict())
        self.db.add(db_att)
        self.db.commit()
        self.db.refresh(db_att)
        return db_att

    def update(self, attendance_id: int, updates: dict) -> Attendance:
        db_att = self.get(attendance_id)
        for key, value in updates.items():
            setattr(db_att, key, value)
        self.db.commit()
        self.db.refresh(db_att)
        return db_att

    def delete(self, attendance_id: int) -> None:
        db_att = self.get(attendance_id)
        if db_att:
            self.db.delete(db_att)
            self.db.commit()



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\grade_repository.py
==================================================

# backend/repositories/grade_repository.py
from sqlalchemy.orm import Session
from models.grade import Grade
from schemas.grade import GradeCreate

class GradeRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, grade_id: int) -> Grade:
        return self.db.query(Grade).filter(Grade.id == grade_id).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Grade).offset(skip).limit(limit).all()

    def create(self, grade: GradeCreate) -> Grade:
        db_grade = Grade(**grade.dict())
        self.db.add(db_grade)
        self.db.commit()
        self.db.refresh(db_grade)
        return db_grade

    def update(self, grade_id: int, updates: dict) -> Grade:
        db_grade = self.get(grade_id)
        for key, value in updates.items():
            setattr(db_grade, key, value)
        self.db.commit()
        self.db.refresh(db_grade)
        return db_grade

    def delete(self, grade_id: int) -> None:
        db_grade = self.get(grade_id)
        if db_grade:
            self.db.delete(db_grade)
            self.db.commit()



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\parent_repository.py
==================================================

# backend/repositories/parent_repository.py
from sqlalchemy.orm import Session
from models.parent import Parent
from schemas.parent import ParentCreate

class ParentRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, parent_id: int) -> Parent:
        return self.db.query(Parent).filter(Parent.id == parent_id).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Parent).offset(skip).limit(limit).all()

    def create(self, parent: ParentCreate) -> Parent:
        db_parent = Parent(**parent.dict())
        self.db.add(db_parent)
        self.db.commit()
        self.db.refresh(db_parent)
        return db_parent

    def update(self, parent_id: int, updates: dict) -> Parent:
        db_parent = self.get(parent_id)
        for key, value in updates.items():
            setattr(db_parent, key, value)
        self.db.commit()
        self.db.refresh(db_parent)
        return db_parent

    def delete(self, parent_id: int) -> None:
        db_parent = self.get(parent_id)
        if db_parent:
            self.db.delete(db_parent)
            self.db.commit()



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\schedule_repository.py
==================================================

# backend/repositories/schedule_repository.py
from sqlalchemy.orm import Session
from models.schedule import Schedule
from schemas.schedule import ScheduleCreate

class ScheduleRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, schedule_id: int) -> Schedule:
        return self.db.query(Schedule).filter(Schedule.id == schedule_id).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Schedule).offset(skip).limit(limit).all()

    def create(self, schedule: ScheduleCreate) -> Schedule:
        db_schedule = Schedule(**schedule.dict())
        self.db.add(db_schedule)
        self.db.commit()
        self.db.refresh(db_schedule)
        return db_schedule

    def update(self, schedule_id: int, updates: dict) -> Schedule:
        db_schedule = self.get(schedule_id)
        for key, value in updates.items():
            setattr(db_schedule, key, value)
        self.db.commit()
        self.db.refresh(db_schedule)
        return db_schedule

    def delete(self, schedule_id: int) -> None:
        db_schedule = self.get(schedule_id)
        if db_schedule:
            self.db.delete(db_schedule)
            self.db.commit()



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\student_repository.py
==================================================

# backend/repositories/student_repository.py
from sqlalchemy.orm import Session
from models.student import Student
from schemas.student import StudentCreate, StudentRead

class StudentRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, student_id: int) -> Student:
        return self.db.query(Student).filter(Student.id == student_id).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Student).offset(skip).limit(limit).all()

    def create(self, student: StudentCreate) -> Student:
        db_student = Student(**student.dict())
        self.db.add(db_student)
        self.db.commit()
        self.db.refresh(db_student)
        return db_student

    def update(self, student_id: int, updates: dict) -> Student:
        db_student = self.get(student_id)
        for key, value in updates.items():
            setattr(db_student, key, value)
        self.db.commit()
        self.db.refresh(db_student)
        return db_student

    def delete(self, student_id: int) -> None:
        db_student = self.get(student_id)
        if db_student:
            self.db.delete(db_student)
            self.db.commit()

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\subject_repository.py
==================================================

# backend/repositories/subject_repository.py
from sqlalchemy.orm import Session
from models.subject import Subject
from schemas.subject import SubjectCreate

class SubjectRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, subject_id: int) -> Subject:
        return self.db.query(Subject).filter(Subject.id == subject_id).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Subject).offset(skip).limit(limit).all()

    def create(self, subject: SubjectCreate) -> Subject:
        db_subject = Subject(**subject.dict())
        self.db.add(db_subject)
        self.db.commit()
        self.db.refresh(db_subject)
        return db_subject

    def update(self, subject_id: int, updates: dict) -> Subject:
        db_subject = self.get(subject_id)
        for key, value in updates.items():
            setattr(db_subject, key, value)
        self.db.commit()
        self.db.refresh(db_subject)
        return db_subject

    def delete(self, subject_id: int) -> None:
        db_subject = self.get(subject_id)
        if db_subject:
            self.db.delete(db_subject)
            self.db.commit()



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\teacher_repository.py
==================================================

# backend/repositories/teacher_repository.py
from sqlalchemy.orm import Session
from models.teacher import Teacher
from schemas.teacher import TeacherCreate

class TeacherRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, teacher_id: int) -> Teacher:
        return self.db.query(Teacher).filter(Teacher.id == teacher_id).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(Teacher).offset(skip).limit(limit).all()

    def create(self, teacher: TeacherCreate) -> Teacher:
        db_teacher = Teacher(**teacher.dict())
        self.db.add(db_teacher)
        self.db.commit()
        self.db.refresh(db_teacher)
        return db_teacher

    def update(self, teacher_id: int, updates: dict) -> Teacher:
        db_teacher = self.get(teacher_id)
        for key, value in updates.items():
            setattr(db_teacher, key, value)
        self.db.commit()
        self.db.refresh(db_teacher)
        return db_teacher

    def delete(self, teacher_id: int) -> None:
        db_teacher = self.get(teacher_id)
        if db_teacher:
            self.db.delete(db_teacher)
            self.db.commit()


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\teacher_subject_repository.py
==================================================

# backend/repositories/teacher_subject_repository.py
from sqlalchemy.orm import Session
from models.teacher_subject import TeacherSubject
from schemas.teacher_subject import TeacherSubjectCreate

class TeacherSubjectRepository:
    def __init__(self, db: Session):
        self.db = db

    def get(self, teacher_id: int, subject_id: int) -> TeacherSubject:
        return self.db.query(TeacherSubject).filter(
            TeacherSubject.teacher_id == teacher_id,
            TeacherSubject.subject_id == subject_id
        ).first()

    def get_all(self, skip: int = 0, limit: int = 100):
        return self.db.query(TeacherSubject).offset(skip).limit(limit).all()

    def create(self, ts: TeacherSubjectCreate) -> TeacherSubject:
        db_ts = TeacherSubject(**ts.dict())
        self.db.add(db_ts)
        self.db.commit()
        return db_ts

    def delete(self, teacher_id: int, subject_id: int) -> None:
        db_ts = self.get(teacher_id, subject_id)
        if db_ts:
            self.db.delete(db_ts)
            self.db.commit()



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\repositories\__init__.py
==================================================



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\administrator_router.py
==================================================

# backend/routers/administrator_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.administrator import AdministratorCreate, AdministratorRead
from repositories.administrator_repository import AdministratorRepository
from utils.utils import hash_password

router = APIRouter(prefix="/administrators", tags=["administrators"])

@router.post("/", response_model=AdministratorRead)
def create_administrator(admin: AdministratorCreate, db: Session = Depends(get_db)):
    repo = AdministratorRepository(db)
    hashed = hash_password(admin.password)
    return repo.create(admin, hashed)

@router.get("/{admin_id}", response_model=AdministratorRead)
def read_administrator(admin_id: int, db: Session = Depends(get_db)):
    repo = AdministratorRepository(db)
    db_admin = repo.get(admin_id)
    if not db_admin:
        raise HTTPException(status_code=404, detail="Administrator not found")
    return db_admin

@router.get("/", response_model=list[AdministratorRead])
def read_administrators(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = AdministratorRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{admin_id}", response_model=AdministratorRead)
def update_administrator(admin_id: int, updates: AdministratorCreate, db: Session = Depends(get_db)):
    repo = AdministratorRepository(db)
    db_admin = repo.get(admin_id)
    if not db_admin:
        raise HTTPException(status_code=404, detail="Administrator not found")
    # Если пароль обновляется, нужно хешировать
    hashed = hash_password(updates.password)
    return repo.update(admin_id, {**updates.dict(exclude={"password"}), "password_hash": hashed})

@router.delete("/{admin_id}")
def delete_administrator(admin_id: int, db: Session = Depends(get_db)):
    repo = AdministratorRepository(db)
    repo.delete(admin_id)
    return {"ok": True}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\attendance_router.py
==================================================

# backend/routers/attendance_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.attendance import AttendanceCreate, AttendanceRead
from repositories.attendance_repository import AttendanceRepository

router = APIRouter(prefix="/attendance", tags=["attendance"])

@router.post("/", response_model=AttendanceRead)
def create_attendance(att: AttendanceCreate, db: Session = Depends(get_db)):
    repo = AttendanceRepository(db)
    existing = repo.get_by_student_date(att.student_id, att.date)
    if existing:
        raise HTTPException(status_code=400, detail="Attendance record already exists for this student and date")
    return repo.create(att)

@router.get("/{attendance_id}", response_model=AttendanceRead)
def read_attendance(attendance_id: int, db: Session = Depends(get_db)):
    repo = AttendanceRepository(db)
    db_att = repo.get(attendance_id)
    if not db_att:
        raise HTTPException(status_code=404, detail="Attendance not found")
    return db_att

@router.get("/", response_model=list[AttendanceRead])
def read_attendance_records(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = AttendanceRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{attendance_id}", response_model=AttendanceRead)
def update_attendance(attendance_id: int, updates: AttendanceCreate, db: Session = Depends(get_db)):
    repo = AttendanceRepository(db)
    db_att = repo.get(attendance_id)
    if not db_att:
        raise HTTPException(status_code=404, detail="Attendance not found")
    return repo.update(attendance_id, updates.dict())

@router.delete("/{attendance_id}")
def delete_attendance(attendance_id: int, db: Session = Depends(get_db)):
    repo = AttendanceRepository(db)
    repo.delete(attendance_id)
    return {"ok": True}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\grade_router.py
==================================================

# backend/routers/grade_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.grade import GradeCreate, GradeRead
from repositories.grade_repository import GradeRepository

router = APIRouter(prefix="/grades", tags=["grades"])

@router.post("/", response_model=GradeRead)
def create_grade(grade: GradeCreate, db: Session = Depends(get_db)):
    repo = GradeRepository(db)
    return repo.create(grade)

@router.get("/{grade_id}", response_model=GradeRead)
def read_grade(grade_id: int, db: Session = Depends(get_db)):
    repo = GradeRepository(db)
    db_grade = repo.get(grade_id)
    if not db_grade:
        raise HTTPException(status_code=404, detail="Grade not found")
    return db_grade

@router.get("/", response_model=list[GradeRead])
def read_grades(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = GradeRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{grade_id}", response_model=GradeRead)
def update_grade(grade_id: int, updates: GradeCreate, db: Session = Depends(get_db)):
    repo = GradeRepository(db)
    db_grade = repo.get(grade_id)
    if not db_grade:
        raise HTTPException(status_code=404, detail="Grade not found")
    return repo.update(grade_id, updates.dict())

@router.delete("/{grade_id}")
def delete_grade(grade_id: int, db: Session = Depends(get_db)):
    repo = GradeRepository(db)
    repo.delete(grade_id)
    return {"ok": True}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\parent_router.py
==================================================

# backend/routers/parent_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.parent import ParentCreate, ParentRead
from repositories.parent_repository import ParentRepository

router = APIRouter(prefix="/parents", tags=["parents"])

@router.post("/", response_model=ParentRead)
def create_parent(parent: ParentCreate, db: Session = Depends(get_db)):
    repo = ParentRepository(db)
    return repo.create(parent)

@router.get("/{parent_id}", response_model=ParentRead)
def read_parent(parent_id: int, db: Session = Depends(get_db)):
    repo = ParentRepository(db)
    db_parent = repo.get(parent_id)
    if not db_parent:
        raise HTTPException(status_code=404, detail="Parent not found")
    return db_parent

@router.get("/", response_model=list[ParentRead])
def read_parents(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = ParentRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{parent_id}", response_model=ParentRead)
def update_parent(parent_id: int, updates: ParentCreate, db: Session = Depends(get_db)):
    repo = ParentRepository(db)
    db_parent = repo.get(parent_id)
    if not db_parent:
        raise HTTPException(status_code=404, detail="Parent not found")
    return repo.update(parent_id, updates.dict())

@router.delete("/{parent_id}")
def delete_parent(parent_id: int, db: Session = Depends(get_db)):
    repo = ParentRepository(db)
    repo.delete(parent_id)
    return {"ok": True}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\schedule_router.py
==================================================

# backend/routers/schedule_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.schedule import ScheduleCreate, ScheduleRead
from repositories.schedule_repository import ScheduleRepository

router = APIRouter(prefix="/schedules", tags=["schedules"])

@router.post("/", response_model=ScheduleRead)
def create_schedule(schedule: ScheduleCreate, db: Session = Depends(get_db)):
    repo = ScheduleRepository(db)
    return repo.create(schedule)

@router.get("/{schedule_id}", response_model=ScheduleRead)
def read_schedule(schedule_id: int, db: Session = Depends(get_db)):
    repo = ScheduleRepository(db)
    db_schedule = repo.get(schedule_id)
    if not db_schedule:
        raise HTTPException(status_code=404, detail="Schedule not found")
    return db_schedule

@router.get("/", response_model=list[ScheduleRead])
def read_schedules(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = ScheduleRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{schedule_id}", response_model=ScheduleRead)
def update_schedule(schedule_id: int, updates: ScheduleCreate, db: Session = Depends(get_db)):
    repo = ScheduleRepository(db)
    db_schedule = repo.get(schedule_id)
    if not db_schedule:
        raise HTTPException(status_code=404, detail="Schedule not found")
    return repo.update(schedule_id, updates.dict())

@router.delete("/{schedule_id}")
def delete_schedule(schedule_id: int, db: Session = Depends(get_db)):
    repo = ScheduleRepository(db)
    repo.delete(schedule_id)
    return {"ok": True}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\student_router.py
==================================================

# backend/routers/student_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.student import StudentCreate, StudentRead
from repositories.student_repository import StudentRepository

router = APIRouter(prefix="/students", tags=["students"])

@router.post("/", response_model=StudentRead)
def create_student(student: StudentCreate, db: Session = Depends(get_db)):
    repo = StudentRepository(db)
    return repo.create(student)

@router.get("/{student_id}", response_model=StudentRead)
def read_student(student_id: int, db: Session = Depends(get_db)):
    repo = StudentRepository(db)
    db_student = repo.get(student_id)
    if not db_student:
        raise HTTPException(status_code=404, detail="Student not found")
    return db_student

@router.get("/", response_model=list[StudentRead])
def read_students(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = StudentRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{student_id}", response_model=StudentRead)
def update_student(student_id: int, updates: StudentCreate, db: Session = Depends(get_db)):
    repo = StudentRepository(db)
    db_student = repo.get(student_id)
    if not db_student:
        raise HTTPException(status_code=404, detail="Student not found")
    return repo.update(student_id, updates.dict())

@router.delete("/{student_id}")
def delete_student(student_id: int, db: Session = Depends(get_db)):
    repo = StudentRepository(db)
    repo.delete(student_id)
    return {"ok": True}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\subject_router.py
==================================================

# backend/routers/subject_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.subject import SubjectCreate, SubjectRead
from repositories.subject_repository import SubjectRepository

router = APIRouter(prefix="/subjects", tags=["subjects"])

@router.post("/", response_model=SubjectRead)
def create_subject(subj: SubjectCreate, db: Session = Depends(get_db)):
    repo = SubjectRepository(db)
    return repo.create(subj)

@router.get("/{subject_id}", response_model=SubjectRead)
def read_subject(subject_id: int, db: Session = Depends(get_db)):
    repo = SubjectRepository(db)
    db_subj = repo.get(subject_id)
    if not db_subj:
        raise HTTPException(status_code=404, detail="Subject not found")
    return db_subj

@router.get("/", response_model=list[SubjectRead])
def read_subjects(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = SubjectRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{subject_id}", response_model=SubjectRead)
def update_subject(subject_id: int, updates: SubjectCreate, db: Session = Depends(get_db)):
    repo = SubjectRepository(db)
    db_subj = repo.get(subject_id)
    if not db_subj:
        raise HTTPException(status_code=404, detail="Subject not found")
    return repo.update(subject_id, updates.dict())

@router.delete("/{subject_id}")
def delete_subject(subject_id: int, db: Session = Depends(get_db)):
    repo = SubjectRepository(db)
    repo.delete(subject_id)
    return {"ok": True}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\teacher_router.py
==================================================

# backend/routers/teacher_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.teacher import TeacherCreate, TeacherRead
from repositories.teacher_repository import TeacherRepository

router = APIRouter(prefix="/teachers", tags=["teachers"])

@router.post("/", response_model=TeacherRead)
def create_teacher(teacher: TeacherCreate, db: Session = Depends(get_db)):
    repo = TeacherRepository(db)
    return repo.create(teacher)

@router.get("/{teacher_id}", response_model=TeacherRead)
def read_teacher(teacher_id: int, db: Session = Depends(get_db)):
    repo = TeacherRepository(db)
    db_teacher = repo.get(teacher_id)
    if not db_teacher:
        raise HTTPException(status_code=404, detail="Teacher not found")
    return db_teacher

@router.get("/", response_model=list[TeacherRead])
def read_teachers(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    repo = TeacherRepository(db)
    return repo.get_all(skip, limit)

@router.put("/{teacher_id}", response_model=TeacherRead)
def update_teacher(teacher_id: int, updates: TeacherCreate, db: Session = Depends(get_db)):
    repo = TeacherRepository(db)
    db_teacher = repo.get(teacher_id)
    if not db_teacher:
        raise HTTPException(status_code=404, detail="Teacher not found")
    return repo.update(teacher_id, updates.dict())

@router.delete("/{teacher_id}")
def delete_teacher(teacher_id: int, db: Session = Depends(get_db)):
    repo = TeacherRepository(db)
    repo.delete(teacher_id)
    return {"ok": True}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\teacher_subject_router.py
==================================================

# backend/routers/teacher_subject_router.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.db import get_db
from schemas.teacher_subject import TeacherSubjectCreate, TeacherSubjectRead
from repositories.teacher_subject_repository import TeacherSubjectRepository

router = APIRouter(prefix="/teacher-subjects", tags=["teacher_subjects"])

@router.post("/", response_model=TeacherSubjectRead)
def assign_subject(ts: TeacherSubjectCreate, db: Session = Depends(get_db)):
    repo = TeacherSubjectRepository(db)
    return repo.create(ts)

@router.delete("/{teacher_id}/{subject_id}")
def unassign_subject(teacher_id: int, subject_id: int, db: Session = Depends(get_db)):
    repo = TeacherSubjectRepository(db)
    repo.delete(teacher_id, subject_id)
    return {"ok": True}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\routers\__init__.py
==================================================



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\administrator.py
==================================================

# backend/schemas/administrator.py
from pydantic import BaseModel

class AdministratorBase(BaseModel):
    name: str
    login: str
    rights: str

class AdministratorCreate(AdministratorBase):
    password: str

class AdministratorRead(AdministratorBase):
    id: int

    class Config:
        from_attributes = True


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\attendance.py
==================================================

# backend/schemas/attendance.py
from pydantic import BaseModel
from datetime import date
from typing import Optional

class AttendanceBase(BaseModel):
    date: date
    is_present: bool
    reason: Optional[str] = None
    student_id: int

class AttendanceCreate(AttendanceBase):
    pass

class AttendanceRead(AttendanceBase):
    id: int

    class Config:
        from_attributes = True

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\grade.py
==================================================

# backend/schemas/grade.py
from pydantic import BaseModel
from datetime import date

class GradeBase(BaseModel):
    value: int
    date: date
    student_id: int
    teacher_id: int
    subject_id: int

class GradeCreate(GradeBase):
    pass

class GradeRead(GradeBase):
    id: int

    class Config:
        from_attributes = True

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\parent.py
==================================================

# backend/schemas/parent.py
from pydantic import BaseModel
from typing import List, Optional

class ParentBase(BaseModel):
    name: str
    phone: str
    messenger_id: Optional[str] = None

class ParentCreate(ParentBase):
    pass

class ParentRead(ParentBase):
    id: int

    class Config:
        from_attributes = True

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\schedule.py
==================================================

# backend/schemas/schedule.py
from pydantic import BaseModel
from datetime import date

class ScheduleBase(BaseModel):
    date: date
    class_name: str
    teacher_id: int
    subject_id: int

class ScheduleCreate(ScheduleBase):
    pass

class ScheduleRead(ScheduleBase):
    id: int

    class Config:
        from_attributes = True

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\student.py
==================================================

# backend/schemas/student.py
from pydantic import BaseModel
from typing import Optional
from datetime import date

class StudentBase(BaseModel):
    first_name: str
    last_name: str
    class_name: str
    parent_id: Optional[int] = None
    contact_info: Optional[str] = None

class StudentCreate(StudentBase):
    pass

class StudentRead(StudentBase):
    id: int

    class Config:
        from_attributes = True

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\subject.py
==================================================

# backend/schemas/subject.py
from pydantic import BaseModel

class SubjectBase(BaseModel):
    name: str

class SubjectCreate(SubjectBase):
    pass

class SubjectRead(SubjectBase):
    id: int

    class Config:
        from_attributes = True


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\teacher.py
==================================================

# backend/schemas/teacher.py
from pydantic import BaseModel
from typing import Optional

class TeacherBase(BaseModel):
    first_name: str
    last_name: str

class TeacherCreate(TeacherBase):
    pass

class TeacherRead(TeacherBase):
    id: int

    class Config:
        from_attributes = True

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\teacher_subject.py
==================================================

# backend/schemas/teacher_subject.py
from pydantic import BaseModel

class TeacherSubjectBase(BaseModel):
    teacher_id: int
    subject_id: int

class TeacherSubjectCreate(TeacherSubjectBase):
    pass

class TeacherSubjectRead(TeacherSubjectBase):
    class Config:
        from_attributes = True


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\schemas\__init__.py
==================================================



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\utils\utils.py
==================================================

from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    """
    Хеширует пароль для хранения в БД.
    """
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    Сравнивает сырой пароль с хранимым хешем.
    """
    return pwd_context.verify(plain_password, hashed_password)


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\backend\utils\__init__.py
==================================================



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\public\index.html
==================================================

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>New Gradebook</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\App.jsx
==================================================

// src/App.jsx
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { useSelector, useDispatch } from 'react-redux';
import store from './store';
import AppRoutes from './routes';
import Navbar from './components/Navbar';
import Notification from './components/Notification';
import { clearError } from './store/gradebookSlice'; // Теперь импорт корректен

function AppWrapper() {
  const { status, error } = useSelector(state => state.gradebooks);
  const dispatch = useDispatch();

  const handleCloseNotification = () => {
    dispatch(clearError()); // Диспатчим action для очистки ошибки
  };

  return (
    <>
      <Navbar />
      <main className="main-content">
        <AppRoutes />
      </main>
      
      {status === 'failed' && (
        <Notification 
          type="error" 
          message={error} 
          onClose={handleCloseNotification}
        />
      )}
    </>
  );
}

function App() {
  return (
    <Provider store={store}>
      <BrowserRouter>
        <AppWrapper />
      </BrowserRouter>
    </Provider>
  );
}

export default App;

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\index.jsx
==================================================

// src/index.jsx
import React from 'react';
import { createRoot } from 'react-dom/client'; // Изменяем импорт
import App from './App';
import './styles/globals.css';

const root = createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\api\client.js
==================================================

// src/api/client.js
import axios from 'axios';

const client = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',
});

// Request interceptor: attach auth token if available
client.interceptors.request.use(
  config => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  error => Promise.reject(error)
);

// Response interceptor: handle global errors
client.interceptors.response.use(
  response => response,
  error => {
    if (error.response && error.response.status === 401) {
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default client;

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\api\gradebookApi.js
==================================================

// src/api/gradebookApi.js
import client from './client';
import axios from 'axios'

export const getGradebooks = () => client.get('/grades/');
export const getGradebook = id => client.get(`/grades/${id}`);
export const createGradebook = data => client.post('/grades/', data);
export const updateGradebook = (id, data) =>
  client.put(`/grades/${id}`, data);
export const deleteGradebook = id =>
  client.delete(`/grades/${id}`);

export const fetchGrades      = () => axios.get('/grades/')
export const fetchStudents    = () => axios.get('/students')
export const fetchSubjects    = () => axios.get('/subjects')
export const fetchTeachers    = () => axios.get('/teachers')

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\FilterDropdown.jsx
==================================================

// components/FilterDropdown.jsx
import styles from './FilterDropdown.module.css';

export default function FilterDropdown({ options, selectedValue, onSelect }) {
  return (
    <select
      value={selectedValue}
      onChange={e => onSelect(e.target.value)}
      className={styles.select}
    >
      {options.map(opt => (
        <option key={opt.value} value={opt.value}>
          {opt.label}
        </option>
      ))}
    </select>
  );
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\FilterDropdown.module.css
==================================================

.select {
  padding: 6px 12px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: white;
  cursor: pointer;
}

.select:focus {
  outline: none;
  border-color: #3f51b5;
  box-shadow: 0 0 5px rgba(63, 81, 181, 0.5);
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\ProgressBar.jsx
==================================================

// components/ProgressBar.jsx
import styles from './ProgressBar.module.css';

export default function ProgressBar({ progress, label }) {
  return (
    <div className={styles.progressContainer}>
      <div className={styles.bar}>
        <div
          className={styles.fill}
          style={{ width: `${progress}%` }}
        />
      </div>
      <span className={styles.label}>{label}</span>
    </div>
  );
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\ProgressBar.module.css
==================================================

.progressContainer {
  display: flex;
  align-items: center;
  gap: 10px;
}

.bar {
  flex-grow: 1;
  height: 12px;
  background-color: #e0e0e0;
  border-radius: 6px;
  overflow: hidden;
}

.fill {
  height: 100%;
  background-color: #3f51b5;
  border-radius: 6px 0 0 6px;
  transition: width 0.3s ease;
}

.label {
  min-width: 40px;
  font-size: 14px;
  color: #333;
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\SearchInput.jsx
==================================================

// components/SearchInput.jsx
import styles from './searchInput.module.css';
import { FaSearch } from 'react-icons/fa';  // импорт иконки поиска

export default function SearchInput({ value, onChange, placeholder }) {
  return (
    <div className={styles.searchContainer}>
      <input
        type="text"
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        className={styles.input}
      />
      <FaSearch className={styles.icon} />
    </div>
  );
}



==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\searchInput.module.css
==================================================

.input {
  padding: 8px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\StatusBadge.jsx
==================================================

// components/StatusBadge.jsx
import styles from './StatusBadge.module.css';

export default function StatusBadge({ status }) {
  return (
    <span className={`${styles.badge} ${styles[status]}`}>
      {status === 'active' ? 'Активный' : 'Архивный'}
    </span>
  );
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\StatusBadge.module.css
==================================================

.badge {
  padding: 4px 10px;
  border-radius: 12px;
  font-weight: 600;
  font-size: 14px;
  color: white;
  display: inline-block;
  user-select: none;
}

.active {
  background-color: #4caf50; /* зеленый */
}

.archived {
  background-color: #9e9e9e; /* серый */
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\Dashboard\index.jsx
==================================================

// components/Dashboard/index.jsx
import { useGradebooks } from '../../hooks/useGradebooks';

export default function Dashboard() {
  const { gradebooks } = useGradebooks();
  
  const stats = {
    total: gradebooks.length,
    active: gradebooks.filter(g => g.status === 'active').length,
    archived: gradebooks.filter(g => g.status === 'archived').length
  };

  return (
    <div className={styles.dashboard}>
      <div className={styles.statCard}>
        <h3>Всего журналов</h3>
        <div className={styles.value}>{stats.total}</div>
      </div>
      <div className={styles.statCard}>
        <h3>Активных</h3>
        <div className={styles.value}>{stats.active}</div>
      </div>
      <div className={styles.statCard}>
        <h3>Архивных</h3>
        <div className={styles.value}>{stats.archived}</div>
      </div>
    </div>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookCreatePage\index.jsx
==================================================

// src/components/GradebookCreatePage/index.jsx
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { addGradebook } from '../../store/gradebookSlice';
import { useNavigate } from 'react-router-dom';

export default function GradebookCreatePage() {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await dispatch(addGradebook(formData));
      navigate('/', { state: { message: 'Журнал успешно создан!' } });
    } catch (error) {
      console.error('Ошибка создания:', error);
      setNotification({
        type: 'error',
        message: 'Не удалось создать журнал. Проверьте данные и попробуйте снова.'
      });
    }
  };

  return (
    <form onSubmit={handleSubmit} style={{ padding: '1rem' }}>
      <div>
        <label>Название:</label>
        <input
          type="text"
          value={name}
          onChange={e => setName(e.target.value)}
          required
        />
      </div>
      <div>
        <label>Описание:</label>
        <textarea
          value={description}
          onChange={e => setDescription(e.target.value)}
        />
      </div>
      <button type="submit">Создать журнал</button>
    </form>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookDetailPage\index.jsx
==================================================

// src/components/GradebookDetailPage/index.jsx
import React, { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchGradebookById, removeGradebook } from '../../store/gradebookSlice';
import GradebookItem from '../GradebookItem';

export default function GradebookDetailPage() {
  const { id } = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { current, status, error } = useSelector(state => state.gradebooks);

  useEffect(() => {
    dispatch(fetchGradebookById(id));
  }, [dispatch, id]);

  const handleDelete = async () => {
    const confirmed = window.confirm('Вы уверены, что хотите удалить этот журнал?');
    if (confirmed) {
      await dispatch(removeGradebook(id));
      navigate('/');
    }
  };

  if (status === 'loading') return <p>Загрузка...</p>;
  if (status === 'failed') return <p>Ошибка: {error}</p>;
  if (!current) return <p>Журнал не найден.</p>;

  return (
    <div>
      <GradebookItem gradebook={current} />
      <button onClick={handleDelete} style={{ marginTop: '1rem' }}>
        Удалить журнал
      </button>
    </div>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookEditPage\index.jsx
==================================================

// src/components/GradebookEditPage/index.jsx
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchGradebookById, editGradebook } from '../../store/gradebookSlice';
import { useParams, useNavigate } from 'react-router-dom';

export default function GradebookEditPage() {
  const { id } = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { current, status, error } = useSelector(state => state.gradebooks);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');

  useEffect(() => {
    dispatch(fetchGradebookById(id));
  }, [dispatch, id]);

  useEffect(() => {
    if (current) {
      setName(current.name);
      setDescription(current.description);
    }
  }, [current]);

  const handleSubmit = async e => {
    e.preventDefault();
    await dispatch(editGradebook({ id, data: { name, description } }));
    navigate(`/grade/${id}`);
  };

  if (status === 'loading') return <p>Загрузка...</p>;
  if (status === 'failed') return <p>Ошибка: {error}</p>;

  return (
    <form onSubmit={handleSubmit} style={{ padding: '1rem' }}>
      <div>
        <label>Название:</label>
        <input
          type="text"
          value={name}
          onChange={e => setName(e.target.value)}
          required
        />
      </div>
      <div>
        <label>Описание:</label>
        <textarea
          value={description}
          onChange={e => setDescription(e.target.value)}
        />
      </div>
      <button type="submit">Сохранить изменения</button>
    </form>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookForm\gradebookForm.module.css
==================================================

/* src/components/GradebookForm/gradebookForm.module.css */
.form {
    max-width: 600px;
    margin: 2rem auto;
    padding: 2rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .formGroup {
    margin-bottom: 1.5rem;
  }
  
  .label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--color-text);
    font-weight: 500;
  }
  
  .input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }
  
  .textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    resize: vertical;
  }
  
  .submitButton {
    background: var(--color-primary);
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.2s;
  }
  
  .submitButton:hover {
    background: #3b82f6;
  }

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookForm\index.jsx
==================================================

// src/components/GradebookForm/index.jsx
import styles from './gradebookForm.module.css';

export default function GradebookForm({ initialData, onSubmit }) {
  const [formData, setFormData] = useState(initialData || {});
  const [errors, setErrors] = useState({});

  const validate = () => {
    const newErrors = {};
    if (!formData.name) newErrors.name = 'Название обязательно';
    if (formData.class?.length > 10) newErrors.class = 'Слишком длинное название класса';
    return newErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length === 0) {
      onSubmit(formData);
    } else {
      setErrors(validationErrors);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <FormField
        label="Название журнала"
        error={errors.name}
        inputProps={{
          value: formData.name,
          onChange: (e) => setFormData({...formData, name: e.target.value})
        }}
      />
      
      <FormField
        label="Класс"
        error={errors.class}
        inputProps={{
          value: formData.class,
          onChange: (e) => setFormData({...formData, class: e.target.value})
        }}
      />

      <FormToggle
        label="Архивный журнал"
        checked={formData.status === 'archived'}
        onChange={(checked) => 
          setFormData({...formData, status: checked ? 'archived' : 'active'})
        }
      />

      <FormActions>
        <Button type="submit">Сохранить</Button>
        <Button type="button" variant="secondary">Отмена</Button>
      </FormActions>
    </form>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookItem\gradebookItem.module.css
==================================================

/* src/components/GradebookItem/gradebookItem.module.css (обновленный) */
.card {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  transition: transform 0.2s;
  margin-bottom: 1rem;
}

.card:hover {
  transform: translateY(-2px);
}

.name a {
  color: var(--color-primary);
  text-decoration: none;
}

.description {
  color: #666;
  margin: 0.5rem 0;
  line-height: 1.5;
}

.footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
}

.count {
  font-size: 0.9rem;
  color: var(--color-secondary);
}

.editButton {
  background: var(--color-primary);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  text-decoration: none;
  font-size: 0.9rem;
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookItem\index.jsx
==================================================

// src/components/GradebookItem/index.jsx (обновленная версия)
import { Link } from 'react-router-dom';
import styles from './gradebookItem.module.css';

export default function GradebookItem({ gradebook }) {
  return (
    <div className={styles.card}>
      <div className={styles.header}>
        <h2>{gradebook.name}</h2>
        <StatusBadge status={gradebook.status} />
      </div>
      
      <div className={styles.meta}>
        <span>Класс: {gradebook.class}</span>
        <span>Учеников: {gradebook.students.length}</span>
      </div>

      <ProgressBar 
        progress={gradebook.completion} 
        label={`Заполнено: ${gradebook.completion}%`}
      />

      <div className={styles.actions}>
        <Button variant="primary" to={`/grade/${gradebook.id}`}>
          Открыть
        </Button>
        <Button variant="secondary" to={`/grade/${gradebook.id}/edit`}>
          Редактировать
        </Button>
      </div>
    </div>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookListPage\gradebookList.module.css
==================================================

/* src/components/GradebookList/gradebookList.module.css */
.container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem;
  }
  
  .title {
    font-size: 1.5rem;
    color: var(--color-secondary);
  }

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\GradebookListPage\index.jsx
==================================================

// components/GradebookListPage/index.jsx (обновленная версия)
import { useState } from 'react';
import SearchInput from '../SearchInput';
import StatusBadge from '../StatusBadge';
import ProgressBar from '../ProgressBar';

// Добавляем импорт FilterDropdown, который вам нужно создать в ../FilterDropdown.jsx
import FilterDropdown from '../FilterDropdown';

// Предполагаем, что useGradebooks — кастомный хук для получения данных, 
// если у вас его нет — замените или реализуйте
import useGradebooks from '../../hooks/useGradebooks'; 

// Импорт стилей (если используете CSS Modules или похожий подход)
import styles from './gradebookList.module.css';

export default function GradebookListPage() {
  const { gradebooks, status, error } = useGradebooks();
  const [searchTerm, setSearchTerm] = useState('');
  const [filter, setFilter] = useState('all');

  const filteredGradebooks = gradebooks.filter(gb => {
    const matchesSearch = gb.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filter === 'all' || gb.status === filter;
    return matchesSearch && matchesFilter;
  });

  if (status === 'loading') return <ProgressBar />;
  if (error) return <div>Ошибка загрузки данных: {error.message}</div>;

  return (
    <div className={styles.container}>
      <div className={styles.controls}>
        <SearchInput 
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Поиск по названию..."
        />
        <FilterDropdown
          options={[
            { value: 'all', label: 'Все журналы' },
            { value: 'active', label: 'Активные' },
            { value: 'archived', label: 'Архивные' }
          ]}
          selectedValue={filter}
          onSelect={setFilter}
        />
      </div>

      <div className={styles.list}>
        {filteredGradebooks.length === 0 
          ? <div>Журналы не найдены</div>
          : filteredGradebooks.map(gb => (
            <div key={gb.id} className={styles.gradebookItem}>
              <h3>{gb.name}</h3>
              <StatusBadge status={gb.status} />
              {/* Другие данные журнала */}
            </div>
          ))
        }
      </div>
    </div>
  );
}


==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\Navbar\index.jsx
==================================================

// src/components/Navbar/index.jsx
import { Link } from 'react-router-dom';
import styles from './navbar.module.css';

export default function Navbar() {
  return (
    <nav className={styles.navbar}>
      <div className={styles.logo}>Gradebook</div>
      <div className={styles.links}>
        <Link to="/" className={styles.link}>Журналы</Link>
        <Link to="/new" className={styles.button}>Создать журнал</Link>
      </div>
    </nav>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\Navbar\navbar.module.css
==================================================

/* src/components/Navbar/navbar.module.css */
.navbar {
    background: var(--color-primary);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .logo {
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
  }
  
  .links {
    display: flex;
    gap: 2rem;
    align-items: center;
  }
  
  .link {
    color: white;
    text-decoration: none;
    transition: opacity 0.2s;
  }
  
  .link:hover {
    opacity: 0.8;
  }
  
  .button {
    background: white;
    color: var(--color-primary);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
  }

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\Notification\index.jsx
==================================================

// src/components/Notification/index.jsx
import { useEffect } from 'react';
import styles from './notification.module.css';

export default function Notification({ message, type, onClose }) {
  useEffect(() => {
    const timer = setTimeout(onClose, 3000);
    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <div className={`${styles.notification} ${styles[type]}`}>
      {message}
    </div>
  );
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\components\Notification\notification.module.css
==================================================

/* src/components/Notification/notification.module.css */
.notification {
    position: fixed;
    top: 1rem;
    right: 1rem;
    padding: 1rem 2rem;
    border-radius: 4px;
    color: white;
    z-index: 1000;
  }
  
  .success {
    background: #10b981;
  }
  
  .error {
    background: #ef4444;
  }

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\hooks\useGradebooks.js
==================================================

// src/hooks/useGradebooks.js
import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchGradebooks } from '../store/gradebookSlice';

export default function useGradebooks() {
  const dispatch = useDispatch();
  const { items, status, error } = useSelector(state => state.gradebooks);

  useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchGradebooks());
    }
  }, [status, dispatch]);

  return { gradebooks: items, status, error };
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\routes\index.jsx
==================================================

// src/routes/index.jsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import GradebookListPage from '../components/GradebookListPage';
import GradebookDetailPage from '../components/GradebookDetailPage';
import GradebookCreatePage from '../components/GradebookCreatePage';
import GradebookEditPage from '../components/GradebookEditPage';

const AppRoutes = () => (
  <Routes>
    <Route path="/" element={<GradebookListPage />} />
    <Route path="/grade/:id" element={<GradebookDetailPage />} />
    <Route path="/new" element={<GradebookCreatePage />} />
    <Route path="/grade/:id/edit" element={<GradebookEditPage />} />
  </Routes>
);

export default AppRoutes;

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\store\gradebookSlice.js
==================================================

// src/store/gradebookSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import {
  getGradebooks,
  getGradebook,
  createGradebook,
  updateGradebook,
  deleteGradebook,
} from '../api/gradebookApi';

// Async actions
export const fetchGradebooks = createAsyncThunk(
  'gradebooks/fetchAll',
  async (_, { rejectWithValue }) => {
    try {
      const response = await getGradebooks();
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const fetchGradebookById = createAsyncThunk(
  'gradebooks/fetchById',
  async (id, { rejectWithValue }) => {
    try {
      const response = await getGradebook(id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const addGradebook = createAsyncThunk(
  'gradebooks/add',
  async (data, { rejectWithValue }) => {
    try {
      const response = await createGradebook(data);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const editGradebook = createAsyncThunk(
  'gradebooks/edit',
  async ({ id, data }, { rejectWithValue }) => {
    try {
      const response = await updateGradebook(id, data);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const removeGradebook = createAsyncThunk(
  'gradebooks/remove',
  async (id, { rejectWithValue }) => {
    try {
      await deleteGradebook(id);
      return id;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const initialState = {
  items: [],
  current: null,
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
};

const gradebookSlice = createSlice({
  name: 'gradebooks',
  initialState,
  reducers: {
    clearError: (state) => {
      state.status = 'idle';
      state.error = null;
    },
    resetCurrent: (state) => {
      state.current = null;
    }
  },
  extraReducers: (builder) => {
    builder
      // Конкретные обработчики fulfilled
      .addCase(fetchGradebooks.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchGradebookById.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.current = action.payload;
      })
      .addCase(addGradebook.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.status = 'succeeded';
      })
      .addCase(editGradebook.fulfilled, (state, action) => {
        const index = state.items.findIndex(gb => gb.id === action.payload.id);
        if (index !== -1) state.items[index] = action.payload;
        if (state.current?.id === action.payload.id) state.current = action.payload;
        state.status = 'succeeded';
      })
      .addCase(removeGradebook.fulfilled, (state, action) => {
        state.items = state.items.filter(gb => gb.id !== action.payload);
        if (state.current?.id === action.payload) state.current = null;
        state.status = 'succeeded';
      })

      // Общие обработчики состояний
      .addMatcher(
        (action) => action.type.endsWith('/pending'),
        (state) => {
          state.status = 'loading';
          state.error = null;
        }
      )
      .addMatcher(
        (action) => action.type.endsWith('/rejected'),
        (state, action) => {
          state.status = 'failed';
          state.error = action.payload?.message || action.error.message;
        }
      );
  },
});

export const { clearError, resetCurrent } = gradebookSlice.actions;
export default gradebookSlice.reducer;

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\store\index.js
==================================================

// src/store/index.js
import { configureStore } from '@reduxjs/toolkit';
import gradebookReducer from './gradebookSlice';

const store = configureStore({
  reducer: {
    gradebooks: gradebookReducer,
  },
});

export default store;

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\styles\dashboard.module.css
==================================================

/* styles/dashboard.module.css */
.dashboard {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.statCard {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.statCard h3 {
  color: var(--color-text-secondary);
  margin-bottom: 0.5rem;
}

.value {
  font-size: 2rem;
  font-weight: bold;
  color: var(--color-primary);
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\styles\globals.css
==================================================

/* src/styles/globals.css */
@import './variables.css';

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: var(--font-base);
  background-color: var(--color-bg);
  color: var(--color-text);
}

a {
  text-decoration: none;
  color: var(--color-primary);
}

button {
  font-family: var(--font-base);
  cursor: pointer;
}

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\styles\variables.css
==================================================

/* src/styles/variables.css */
:root {
    --color-primary: #4f46e5;
    --color-secondary: #f59e0b;
    --color-bg: #f3f4f6;
    --color-text: #1f2937;
    --font-base: 'Roboto', sans-serif;
    --breakpoint-mobile: 768px;
  }

==================================================
FILE: C:\Users\TECH - 103\Documents\new_gradebook\frontend\src\utils\formatDate.js
==================================================

